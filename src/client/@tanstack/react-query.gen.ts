// This file is auto-generated by @hey-api/openapi-ts

import {
  
  
  infiniteQueryOptions,
  queryOptions
} from '@tanstack/react-query'
import {
  
  createProject,
  createSample,
  getProjectByProjectId,
  getProjects,
  getSampleBySampleId,
  getSamples,
  root
} from '../sdk.gen'
import { client as _heyApiClient } from '../client.gen'
import type {InfiniteData, UseMutationOptions} from '@tanstack/react-query';
import type {Options} from '../sdk.gen';
import type {
  CreateProjectData,
  CreateProjectError,
  CreateProjectResponse,
  CreateSampleData,
  CreateSampleError,
  CreateSampleResponse,
  GetProjectByProjectIdData,
  GetProjectsData,
  GetProjectsError,
  GetProjectsResponse,
  GetSampleBySampleIdData,
  GetSamplesData,
  GetSamplesError,
  GetSamplesResponse,
  RootData,
} from '../types.gen'
import type { AxiosError } from 'axios'

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string
    _infinite?: boolean
  },
]

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseURL: (options?.client ?? _heyApiClient).getConfig().baseURL,
  } as QueryKey<TOptions>[0]
  if (infinite) {
    params._infinite = infinite
  }
  if (options?.body) {
    params.body = options.body
  }
  if (options?.headers) {
    params.headers = options.headers
  }
  if (options?.path) {
    params.path = options.path
  }
  if (options?.query) {
    params.query = options.query
  }
  return [params]
}

export const rootQueryKey = (options?: Options<RootData>) =>
  createQueryKey('root', options)

/**
 * Root
 */
export const rootOptions = (options?: Options<RootData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await root({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: rootQueryKey(options),
  })
}

export const getProjectsQueryKey = (options?: Options<GetProjectsData>) =>
  createQueryKey('getProjects', options)

/**
 * Get Projects
 * Returns a paginated list of projects.
 */
export const getProjectsOptions = (options?: Options<GetProjectsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getProjects({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getProjectsQueryKey(options),
  })
}

const createInfiniteParams = <
  K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>,
>(
  queryKey: QueryKey<Options>,
  page: K,
) => {
  const params = {
    ...queryKey[0],
  }
  if (page.body) {
    params.body = {
      ...(queryKey[0].body as any),
      ...(page.body as any),
    }
  }
  if (page.headers) {
    params.headers = {
      ...queryKey[0].headers,
      ...page.headers,
    }
  }
  if (page.path) {
    params.path = {
      ...(queryKey[0].path as any),
      ...(page.path as any),
    }
  }
  if (page.query) {
    params.query = {
      ...(queryKey[0].query as any),
      ...(page.query as any),
    }
  }
  return params as unknown as typeof page
}

export const getProjectsInfiniteQueryKey = (
  options?: Options<GetProjectsData>,
): QueryKey<Options<GetProjectsData>> =>
  createQueryKey('getProjects', options, true)

/**
 * Get Projects
 * Returns a paginated list of projects.
 */
export const getProjectsInfiniteOptions = (
  options?: Options<GetProjectsData>,
) => {
  return infiniteQueryOptions<
    GetProjectsResponse,
    AxiosError<GetProjectsError>,
    InfiniteData<GetProjectsResponse>,
    QueryKey<Options<GetProjectsData>>,
    | number
    | Pick<
        QueryKey<Options<GetProjectsData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetProjectsData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              }
        const params = createInfiniteParams(queryKey, page)
        const { data } = await getProjects({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        })
        return data
      },
      queryKey: getProjectsInfiniteQueryKey(options),
    },
  )
}

export const createProjectQueryKey = (options: Options<CreateProjectData>) =>
  createQueryKey('createProject', options)

/**
 * Create Project
 * Create a new project with optional attributes.
 */
export const createProjectOptions = (options: Options<CreateProjectData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createProject({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createProjectQueryKey(options),
  })
}

/**
 * Create Project
 * Create a new project with optional attributes.
 */
export const createProjectMutation = (
  options?: Partial<Options<CreateProjectData>>,
): UseMutationOptions<
  CreateProjectResponse,
  AxiosError<CreateProjectError>,
  Options<CreateProjectData>
> => {
  const mutationOptions: UseMutationOptions<
    CreateProjectResponse,
    AxiosError<CreateProjectError>,
    Options<CreateProjectData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createProject({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getProjectByProjectIdQueryKey = (
  options: Options<GetProjectByProjectIdData>,
) => createQueryKey('getProjectByProjectId', options)

/**
 * Get Project By Project Id
 * Returns a single project by its project_id.
 * Note: This is different from its internal "id".
 */
export const getProjectByProjectIdOptions = (
  options: Options<GetProjectByProjectIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getProjectByProjectId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getProjectByProjectIdQueryKey(options),
  })
}

export const getSamplesQueryKey = (options?: Options<GetSamplesData>) =>
  createQueryKey('getSamples', options)

/**
 * Get Samples
 * Returns a paginated list of samples.
 */
export const getSamplesOptions = (options?: Options<GetSamplesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getSamples({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getSamplesQueryKey(options),
  })
}

export const getSamplesInfiniteQueryKey = (
  options?: Options<GetSamplesData>,
): QueryKey<Options<GetSamplesData>> =>
  createQueryKey('getSamples', options, true)

/**
 * Get Samples
 * Returns a paginated list of samples.
 */
export const getSamplesInfiniteOptions = (
  options?: Options<GetSamplesData>,
) => {
  return infiniteQueryOptions<
    GetSamplesResponse,
    AxiosError<GetSamplesError>,
    InfiniteData<GetSamplesResponse>,
    QueryKey<Options<GetSamplesData>>,
    | number
    | Pick<
        QueryKey<Options<GetSamplesData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetSamplesData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              }
        const params = createInfiniteParams(queryKey, page)
        const { data } = await getSamples({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        })
        return data
      },
      queryKey: getSamplesInfiniteQueryKey(options),
    },
  )
}

export const createSampleQueryKey = (options: Options<CreateSampleData>) =>
  createQueryKey('createSample', options)

/**
 * Create Sample
 * Create a new sample with optional attributes.
 */
export const createSampleOptions = (options: Options<CreateSampleData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createSample({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createSampleQueryKey(options),
  })
}

/**
 * Create Sample
 * Create a new sample with optional attributes.
 */
export const createSampleMutation = (
  options?: Partial<Options<CreateSampleData>>,
): UseMutationOptions<
  CreateSampleResponse,
  AxiosError<CreateSampleError>,
  Options<CreateSampleData>
> => {
  const mutationOptions: UseMutationOptions<
    CreateSampleResponse,
    AxiosError<CreateSampleError>,
    Options<CreateSampleData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createSample({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getSampleBySampleIdQueryKey = (
  options: Options<GetSampleBySampleIdData>,
) => createQueryKey('getSampleBySampleId', options)

/**
 * Get Sample By Sample Id
 * Returns a single sample by its sample_id.
 * Note: This is different from its internal "id".
 */
export const getSampleBySampleIdOptions = (
  options: Options<GetSampleBySampleIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getSampleBySampleId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getSampleBySampleIdQueryKey(options),
  })
}
