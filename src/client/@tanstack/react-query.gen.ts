// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  root,
  getProjects,
  createProject,
  searchProjects,
  getProjectByProjectId,
  getSamples,
  addSampleToProject,
  getRuns,
  addRun,
  searchRuns,
  getRun,
  getRunSamplesheet,
  getRunMetrics,
  search,
} from '../sdk.gen'
import {
  queryOptions,
  infiniteQueryOptions,
  type InfiniteData,
  type UseMutationOptions,
} from '@tanstack/react-query'
import type {
  RootData,
  GetProjectsData,
  GetProjectsError,
  GetProjectsResponse,
  CreateProjectData,
  CreateProjectError,
  CreateProjectResponse,
  SearchProjectsData,
  SearchProjectsError,
  SearchProjectsResponse,
  GetProjectByProjectIdData,
  GetSamplesData,
  GetSamplesError,
  GetSamplesResponse,
  AddSampleToProjectData,
  AddSampleToProjectError,
  AddSampleToProjectResponse,
  GetRunsData,
  GetRunsError,
  GetRunsResponse,
  AddRunData,
  AddRunError,
  AddRunResponse,
  SearchRunsData,
  SearchRunsError,
  SearchRunsResponse,
  GetRunData,
  GetRunSamplesheetData,
  GetRunMetricsData,
  SearchData,
} from '../types.gen'
import type { AxiosError } from 'axios'
import { client as _heyApiClient } from '../client.gen'

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string
    _infinite?: boolean
  },
]

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseURL: (options?.client ?? _heyApiClient).getConfig().baseURL,
  } as QueryKey<TOptions>[0]
  if (infinite) {
    params._infinite = infinite
  }
  if (options?.body) {
    params.body = options.body
  }
  if (options?.headers) {
    params.headers = options.headers
  }
  if (options?.path) {
    params.path = options.path
  }
  if (options?.query) {
    params.query = options.query
  }
  return [params]
}

export const rootQueryKey = (options?: Options<RootData>) =>
  createQueryKey('root', options)

/**
 * Root
 */
export const rootOptions = (options?: Options<RootData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await root({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: rootQueryKey(options),
  })
}

export const getProjectsQueryKey = (options?: Options<GetProjectsData>) =>
  createQueryKey('getProjects', options)

/**
 * Get Projects
 * Returns a paginated list of projects.
 */
export const getProjectsOptions = (options?: Options<GetProjectsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getProjects({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getProjectsQueryKey(options),
  })
}

const createInfiniteParams = <
  K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>,
>(
  queryKey: QueryKey<Options>,
  page: K,
) => {
  const params = {
    ...queryKey[0],
  }
  if (page.body) {
    params.body = {
      ...(queryKey[0].body as any),
      ...(page.body as any),
    }
  }
  if (page.headers) {
    params.headers = {
      ...queryKey[0].headers,
      ...page.headers,
    }
  }
  if (page.path) {
    params.path = {
      ...(queryKey[0].path as any),
      ...(page.path as any),
    }
  }
  if (page.query) {
    params.query = {
      ...(queryKey[0].query as any),
      ...(page.query as any),
    }
  }
  return params as unknown as typeof page
}

export const getProjectsInfiniteQueryKey = (
  options?: Options<GetProjectsData>,
): QueryKey<Options<GetProjectsData>> =>
  createQueryKey('getProjects', options, true)

/**
 * Get Projects
 * Returns a paginated list of projects.
 */
export const getProjectsInfiniteOptions = (
  options?: Options<GetProjectsData>,
) => {
  return infiniteQueryOptions<
    GetProjectsResponse,
    AxiosError<GetProjectsError>,
    InfiniteData<GetProjectsResponse>,
    QueryKey<Options<GetProjectsData>>,
    | number
    | Pick<
        QueryKey<Options<GetProjectsData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetProjectsData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              }
        const params = createInfiniteParams(queryKey, page)
        const { data } = await getProjects({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        })
        return data
      },
      queryKey: getProjectsInfiniteQueryKey(options),
    },
  )
}

export const createProjectQueryKey = (options: Options<CreateProjectData>) =>
  createQueryKey('createProject', options)

/**
 * Create Project
 * Create a new project with optional attributes.
 */
export const createProjectOptions = (options: Options<CreateProjectData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createProject({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createProjectQueryKey(options),
  })
}

/**
 * Create Project
 * Create a new project with optional attributes.
 */
export const createProjectMutation = (
  options?: Partial<Options<CreateProjectData>>,
): UseMutationOptions<
  CreateProjectResponse,
  AxiosError<CreateProjectError>,
  Options<CreateProjectData>
> => {
  const mutationOptions: UseMutationOptions<
    CreateProjectResponse,
    AxiosError<CreateProjectError>,
    Options<CreateProjectData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createProject({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const searchProjectsQueryKey = (options: Options<SearchProjectsData>) =>
  createQueryKey('searchProjects', options)

/**
 * Search Projects
 */
export const searchProjectsOptions = (options: Options<SearchProjectsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await searchProjects({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: searchProjectsQueryKey(options),
  })
}

export const searchProjectsInfiniteQueryKey = (
  options: Options<SearchProjectsData>,
): QueryKey<Options<SearchProjectsData>> =>
  createQueryKey('searchProjects', options, true)

/**
 * Search Projects
 */
export const searchProjectsInfiniteOptions = (
  options: Options<SearchProjectsData>,
) => {
  return infiniteQueryOptions<
    SearchProjectsResponse,
    AxiosError<SearchProjectsError>,
    InfiniteData<SearchProjectsResponse>,
    QueryKey<Options<SearchProjectsData>>,
    | number
    | Pick<
        QueryKey<Options<SearchProjectsData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<SearchProjectsData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              }
        const params = createInfiniteParams(queryKey, page)
        const { data } = await searchProjects({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        })
        return data
      },
      queryKey: searchProjectsInfiniteQueryKey(options),
    },
  )
}

export const getProjectByProjectIdQueryKey = (
  options: Options<GetProjectByProjectIdData>,
) => createQueryKey('getProjectByProjectId', options)

/**
 * Get Project By Project Id
 * Returns a single project by its project_id.
 * Note: This is different from its internal "id".
 */
export const getProjectByProjectIdOptions = (
  options: Options<GetProjectByProjectIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getProjectByProjectId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getProjectByProjectIdQueryKey(options),
  })
}

export const getSamplesQueryKey = (options: Options<GetSamplesData>) =>
  createQueryKey('getSamples', options)

/**
 * Get Samples
 * Returns a paginated list of samples.
 */
export const getSamplesOptions = (options: Options<GetSamplesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getSamples({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getSamplesQueryKey(options),
  })
}

export const getSamplesInfiniteQueryKey = (
  options: Options<GetSamplesData>,
): QueryKey<Options<GetSamplesData>> =>
  createQueryKey('getSamples', options, true)

/**
 * Get Samples
 * Returns a paginated list of samples.
 */
export const getSamplesInfiniteOptions = (options: Options<GetSamplesData>) => {
  return infiniteQueryOptions<
    GetSamplesResponse,
    AxiosError<GetSamplesError>,
    InfiniteData<GetSamplesResponse>,
    QueryKey<Options<GetSamplesData>>,
    | number
    | Pick<
        QueryKey<Options<GetSamplesData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetSamplesData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              }
        const params = createInfiniteParams(queryKey, page)
        const { data } = await getSamples({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        })
        return data
      },
      queryKey: getSamplesInfiniteQueryKey(options),
    },
  )
}

export const addSampleToProjectQueryKey = (
  options: Options<AddSampleToProjectData>,
) => createQueryKey('addSampleToProject', options)

/**
 * Add Sample To Project
 * Create a new sample with optional attributes.
 */
export const addSampleToProjectOptions = (
  options: Options<AddSampleToProjectData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await addSampleToProject({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: addSampleToProjectQueryKey(options),
  })
}

/**
 * Add Sample To Project
 * Create a new sample with optional attributes.
 */
export const addSampleToProjectMutation = (
  options?: Partial<Options<AddSampleToProjectData>>,
): UseMutationOptions<
  AddSampleToProjectResponse,
  AxiosError<AddSampleToProjectError>,
  Options<AddSampleToProjectData>
> => {
  const mutationOptions: UseMutationOptions<
    AddSampleToProjectResponse,
    AxiosError<AddSampleToProjectError>,
    Options<AddSampleToProjectData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await addSampleToProject({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getRunsQueryKey = (options?: Options<GetRunsData>) =>
  createQueryKey('getRuns', options)

/**
 * Get Runs
 * Retrieve a list of all sequencing runs.
 */
export const getRunsOptions = (options?: Options<GetRunsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getRuns({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getRunsQueryKey(options),
  })
}

export const getRunsInfiniteQueryKey = (
  options?: Options<GetRunsData>,
): QueryKey<Options<GetRunsData>> => createQueryKey('getRuns', options, true)

/**
 * Get Runs
 * Retrieve a list of all sequencing runs.
 */
export const getRunsInfiniteOptions = (options?: Options<GetRunsData>) => {
  return infiniteQueryOptions<
    GetRunsResponse,
    AxiosError<GetRunsError>,
    InfiniteData<GetRunsResponse>,
    QueryKey<Options<GetRunsData>>,
    | number
    | Pick<
        QueryKey<Options<GetRunsData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetRunsData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              }
        const params = createInfiniteParams(queryKey, page)
        const { data } = await getRuns({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        })
        return data
      },
      queryKey: getRunsInfiniteQueryKey(options),
    },
  )
}

export const addRunQueryKey = (options: Options<AddRunData>) =>
  createQueryKey('addRun', options)

/**
 * Add Run
 * Create a new project with optional attributes.
 */
export const addRunOptions = (options: Options<AddRunData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await addRun({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: addRunQueryKey(options),
  })
}

/**
 * Add Run
 * Create a new project with optional attributes.
 */
export const addRunMutation = (
  options?: Partial<Options<AddRunData>>,
): UseMutationOptions<
  AddRunResponse,
  AxiosError<AddRunError>,
  Options<AddRunData>
> => {
  const mutationOptions: UseMutationOptions<
    AddRunResponse,
    AxiosError<AddRunError>,
    Options<AddRunData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await addRun({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const searchRunsQueryKey = (options: Options<SearchRunsData>) =>
  createQueryKey('searchRuns', options)

/**
 * Search Runs
 * Search for sequencing runs using OpenSearch.
 */
export const searchRunsOptions = (options: Options<SearchRunsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await searchRuns({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: searchRunsQueryKey(options),
  })
}

export const searchRunsInfiniteQueryKey = (
  options: Options<SearchRunsData>,
): QueryKey<Options<SearchRunsData>> =>
  createQueryKey('searchRuns', options, true)

/**
 * Search Runs
 * Search for sequencing runs using OpenSearch.
 */
export const searchRunsInfiniteOptions = (options: Options<SearchRunsData>) => {
  return infiniteQueryOptions<
    SearchRunsResponse,
    AxiosError<SearchRunsError>,
    InfiniteData<SearchRunsResponse>,
    QueryKey<Options<SearchRunsData>>,
    | number
    | Pick<
        QueryKey<Options<SearchRunsData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<SearchRunsData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              }
        const params = createInfiniteParams(queryKey, page)
        const { data } = await searchRuns({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        })
        return data
      },
      queryKey: searchRunsInfiniteQueryKey(options),
    },
  )
}

export const getRunQueryKey = (options: Options<GetRunData>) =>
  createQueryKey('getRun', options)

/**
 * Get Run
 * Retrieve a sequencing run.
 */
export const getRunOptions = (options: Options<GetRunData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getRun({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getRunQueryKey(options),
  })
}

export const getRunSamplesheetQueryKey = (
  options: Options<GetRunSamplesheetData>,
) => createQueryKey('getRunSamplesheet', options)

/**
 * Get Run Samplesheet
 * Retrieve the sample sheet for a specific run.
 */
export const getRunSamplesheetOptions = (
  options: Options<GetRunSamplesheetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getRunSamplesheet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getRunSamplesheetQueryKey(options),
  })
}

export const getRunMetricsQueryKey = (options: Options<GetRunMetricsData>) =>
  createQueryKey('getRunMetrics', options)

/**
 * Get Run Metrics
 * Retrieve demultiplexing metrics for a specific run.
 */
export const getRunMetricsOptions = (options: Options<GetRunMetricsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getRunMetrics({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getRunMetricsQueryKey(options),
  })
}

export const searchQueryKey = (options: Options<SearchData>) =>
  createQueryKey('search', options)

/**
 * Search
 */
export const searchOptions = (options: Options<SearchData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await search({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: searchQueryKey(options),
  })
}
