// This file is auto-generated by @hey-api/openapi-ts

/**
 * Attribute
 */
export type Attribute = {
  /**
   * Key
   */
  key: string | null
  /**
   * Value
   */
  value: string | null
}

/**
 * Body_create_file
 */
export type BodyCreateFile = {
  /**
   * Filename
   */
  filename: string
  entity_type: EntityType
  /**
   * Entity Id
   */
  entity_id: string
  /**
   * Description
   */
  description?: string | null
  file_type?: FileType
  /**
   * Is Public
   */
  is_public?: boolean
  /**
   * Created By
   */
  created_by?: string | null
  /**
   * Content
   */
  content?: (Blob | File) | null
}

/**
 * Body_upload_file_content
 */
export type BodyUploadFileContent = {
  /**
   * Content
   */
  content: Blob | File
}

/**
 * ConversionResult
 */
export type ConversionResult = {
  /**
   * Lanenumber
   */
  LaneNumber: number
  /**
   * Totalclustersraw
   */
  TotalClustersRaw: number
  /**
   * Totalclusterspf
   */
  TotalClustersPF: number
  /**
   * Yield
   */
  Yield?: number | null
  /**
   * Demuxresults
   */
  DemuxResults?: Array<DemuxResult> | null
  Undetermined?: UndeterminedType | null
}

/**
 * DemuxResult
 */
export type DemuxResult = {
  /**
   * Sampleid
   */
  SampleId: string
  /**
   * Samplename
   */
  SampleName?: string | null
  /**
   * Indexmetrics
   */
  IndexMetrics?: Array<IndexMetric> | null
  /**
   * Numberreads
   */
  NumberReads?: number
  /**
   * Yield
   */
  Yield?: number | null
  /**
   * Readmetrics
   */
  ReadMetrics?: Array<ReadMetricsType>
}

/**
 * EntityType
 * Entity types that can have files
 */
export type EntityType = 'project' | 'run'

/**
 * FileBrowserData
 * File browser data structure with separate folders and files
 */
export type FileBrowserData = {
  /**
   * Folders
   */
  folders: Array<FileBrowserFolder>
  /**
   * Files
   */
  files: Array<FileBrowserFile>
}

/**
 * FileBrowserFile
 * File item for file browser
 */
export type FileBrowserFile = {
  /**
   * Name
   */
  name: string
  /**
   * Date
   */
  date: string
  /**
   * Size
   */
  size: number
}

/**
 * FileBrowserFolder
 * Folder item for file browser
 */
export type FileBrowserFolder = {
  /**
   * Name
   */
  name: string
  /**
   * Date
   */
  date: string
}

/**
 * FilePublic
 * Public file representation
 */
export type FilePublic = {
  /**
   * File Id
   */
  file_id: string
  /**
   * Filename
   */
  filename: string
  /**
   * Original Filename
   */
  original_filename: string
  /**
   * File Size
   */
  file_size: number | null
  /**
   * Mime Type
   */
  mime_type: string | null
  /**
   * Description
   */
  description: string | null
  file_type: FileType
  /**
   * Upload Date
   */
  upload_date: string
  /**
   * Created By
   */
  created_by: string | null
  entity_type: EntityType
  /**
   * Entity Id
   */
  entity_id: string
  /**
   * Is Public
   */
  is_public: boolean
  /**
   * Is Archived
   */
  is_archived: boolean
  storage_backend: StorageBackend
  /**
   * Checksum
   */
  checksum?: string | null
}

/**
 * FileType
 * File type categories
 */
export type FileType =
  | 'fastq'
  | 'bam'
  | 'vcf'
  | 'samplesheet'
  | 'metrics'
  | 'report'
  | 'log'
  | 'image'
  | 'document'
  | 'other'

/**
 * FileUpdate
 * Request model for updating file metadata
 */
export type FileUpdate = {
  /**
   * Filename
   */
  filename?: string | null
  /**
   * Description
   */
  description?: string | null
  file_type?: FileType | null
  /**
   * Is Public
   */
  is_public?: boolean | null
  /**
   * Is Archived
   */
  is_archived?: boolean | null
}

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
  /**
   * Detail
   */
  detail?: Array<ValidationError>
}

/**
 * IlluminaMetricsResponseModel
 */
export type IlluminaMetricsResponseModel = {
  /**
   * Flowcell
   */
  Flowcell?: string | null
  /**
   * Runnumber
   */
  RunNumber?: number | null
  /**
   * Runid
   */
  RunId?: string | null
  /**
   * Readinfosforlanes
   */
  ReadInfosForLanes?: Array<ReadInfosForLane> | null
  /**
   * Conversionresults
   */
  ConversionResults?: Array<ConversionResult> | null
  /**
   * Unknownbarcodes
   */
  UnknownBarcodes?: Array<UnknownBarcode> | null
}

/**
 * IlluminaSampleSheetResponseModel
 */
export type IlluminaSampleSheetResponseModel = {
  /**
   * Summary
   */
  Summary?: {
    [key: string]: string
  } | null
  /**
   * Header
   */
  Header?: {
    [key: string]: string
  } | null
  /**
   * Reads
   */
  Reads?: Array<number> | null
  /**
   * Settings
   */
  Settings?: {
    [key: string]: string
  } | null
  /**
   * Data
   */
  Data?: Array<{
    [key: string]: string
  }> | null
  /**
   * Datacols
   */
  DataCols?: Array<string> | null
}

/**
 * IndexMetric
 */
export type IndexMetric = {
  /**
   * Indexsequence
   */
  IndexSequence?: string | null
  /**
   * Mismatchcounts
   */
  MismatchCounts?: {
    [key: string]: number
  } | null
}

/**
 * PaginatedFileResponse
 * Paginated response for file listings
 */
export type PaginatedFileResponse = {
  /**
   * Data
   */
  data: Array<FilePublic>
  /**
   * Total Items
   */
  total_items: number
  /**
   * Total Pages
   */
  total_pages: number
  /**
   * Current Page
   */
  current_page: number
  /**
   * Per Page
   */
  per_page: number
  /**
   * Has Next
   */
  has_next: boolean
  /**
   * Has Prev
   */
  has_prev: boolean
}

/**
 * ProjectCreate
 */
export type ProjectCreate = {
  /**
   * Name
   */
  name: string
  /**
   * Attributes
   */
  attributes?: Array<Attribute> | null
}

/**
 * ProjectPublic
 */
export type ProjectPublic = {
  /**
   * Project Id
   */
  project_id: string
  /**
   * Name
   */
  name: string | null
  /**
   * Attributes
   */
  attributes: Array<Attribute> | null
}

/**
 * ProjectsPublic
 */
export type ProjectsPublic = {
  /**
   * Data
   */
  data: Array<ProjectPublic>
  /**
   * Total Items
   */
  total_items: number
  /**
   * Total Pages
   */
  total_pages: number
  /**
   * Current Page
   */
  current_page: number
  /**
   * Per Page
   */
  per_page: number
  /**
   * Has Next
   */
  has_next: boolean
  /**
   * Has Prev
   */
  has_prev: boolean
}

/**
 * ReadInfo
 */
export type ReadInfo = {
  /**
   * Number
   */
  Number?: number | null
  /**
   * Numcycles
   */
  NumCycles?: number | null
  /**
   * Isindexedread
   */
  IsIndexedRead?: boolean | null
}

/**
 * ReadInfosForLane
 */
export type ReadInfosForLane = {
  /**
   * Lanenumber
   */
  LaneNumber?: number | null
  /**
   * Readinfos
   */
  ReadInfos?: Array<ReadInfo> | null
}

/**
 * ReadMetricsType
 */
export type ReadMetricsType = {
  /**
   * Readnumber
   */
  ReadNumber?: number | null
  /**
   * Yield
   */
  Yield?: number | null
  /**
   * Yieldq30
   */
  YieldQ30?: number | null
  /**
   * Qualityscoresum
   */
  QualityScoreSum?: number | null
  /**
   * Trimmedbases
   */
  TrimmedBases?: number | null
}

/**
 * RunStatus
 * Enumeration of valid sequencing run statuses
 */
export type RunStatus = 'In Progress' | 'Uploading' | 'Ready' | 'Resync'

/**
 * SampleCreate
 */
export type SampleCreate = {
  /**
   * Sample Id
   */
  sample_id: string
  /**
   * Attributes
   */
  attributes?: Array<Attribute> | null
}

/**
 * SamplePublic
 */
export type SamplePublic = {
  /**
   * Sample Id
   */
  sample_id: string
  /**
   * Project Id
   */
  project_id: string
  /**
   * Attributes
   */
  attributes: Array<Attribute> | null
}

/**
 * SamplesPublic
 */
export type SamplesPublic = {
  /**
   * Data
   */
  data: Array<SamplePublic>
  /**
   * Total Items
   */
  total_items: number
  /**
   * Total Pages
   */
  total_pages: number
  /**
   * Current Page
   */
  current_page: number
  /**
   * Per Page
   */
  per_page: number
  /**
   * Has Next
   */
  has_next: boolean
  /**
   * Has Prev
   */
  has_prev: boolean
}

/**
 * SearchResponse
 */
export type SearchResponse = {
  projects: ProjectsPublic
  runs: SequencingRunsPublic
}

/**
 * SequencingRunCreate
 */
export type SequencingRunCreate = {
  /**
   * Run Date
   */
  run_date: string
  /**
   * Machine Id
   */
  machine_id: string
  /**
   * Run Number
   */
  run_number: number
  /**
   * Flowcell Id
   */
  flowcell_id: string
  /**
   * Experiment Name
   */
  experiment_name?: string | null
  /**
   * Run Folder Uri
   */
  run_folder_uri?: string | null
  status?: RunStatus | null
  /**
   * Run Time
   */
  run_time?: string | null
}

/**
 * SequencingRunPublic
 */
export type SequencingRunPublic = {
  /**
   * Run Date
   */
  run_date: string
  /**
   * Machine Id
   */
  machine_id: string
  /**
   * Run Number
   */
  run_number: number
  /**
   * Flowcell Id
   */
  flowcell_id: string
  /**
   * Experiment Name
   */
  experiment_name: string | null
  /**
   * Run Folder Uri
   */
  run_folder_uri: string | null
  status: RunStatus | null
  /**
   * Run Time
   */
  run_time: string | null
  /**
   * Barcode
   */
  barcode: string | null
}

/**
 * SequencingRunUpdateRequest
 */
export type SequencingRunUpdateRequest = {
  run_status: RunStatus
}

/**
 * SequencingRunsPublic
 */
export type SequencingRunsPublic = {
  /**
   * Data
   */
  data: Array<SequencingRunPublic>
  /**
   * Total Items
   */
  total_items: number
  /**
   * Total Pages
   */
  total_pages: number
  /**
   * Current Page
   */
  current_page: number
  /**
   * Per Page
   */
  per_page: number
  /**
   * Has Next
   */
  has_next: boolean
  /**
   * Has Prev
   */
  has_prev: boolean
}

/**
 * StorageBackend
 * Storage backend types
 */
export type StorageBackend = 'local' | 's3' | 'azure' | 'gcs'

/**
 * UndeterminedType
 */
export type UndeterminedType = {
  /**
   * Numberreads
   */
  NumberReads?: number | null
  /**
   * Yield
   */
  Yield?: number | null
  /**
   * Readmetrics
   */
  ReadMetrics?: Array<ReadMetricsType> | null
}

/**
 * UnknownBarcode
 */
export type UnknownBarcode = {
  /**
   * Lane
   */
  Lane?: number | null
  /**
   * Barcodes
   */
  Barcodes?: {
    [key: string]: number
  } | null
}

/**
 * ValidationError
 */
export type ValidationError = {
  /**
   * Location
   */
  loc: Array<string | number>
  /**
   * Message
   */
  msg: string
  /**
   * Error Type
   */
  type: string
}

export type RootData = {
  body?: never
  path?: never
  query?: never
  url: '/'
}

export type RootResponses = {
  /**
   * Successful Response
   */
  200: unknown
}

export type GetProjectsData = {
  body?: never
  path?: never
  query?: {
    /**
     * Page
     * Page number (1-indexed)
     */
    page?: number
    /**
     * Per Page
     * Number of items per page
     */
    per_page?: number
    /**
     * Sort By
     * Field to sort by
     */
    sort_by?: string
    /**
     * Sort Order
     * Sort order (asc or desc)
     */
    sort_order?: 'asc' | 'desc'
  }
  url: '/api/v1/projects'
}

export type GetProjectsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetProjectsError = GetProjectsErrors[keyof GetProjectsErrors]

export type GetProjectsResponses = {
  /**
   * Successful Response
   */
  200: ProjectsPublic
}

export type GetProjectsResponse =
  GetProjectsResponses[keyof GetProjectsResponses]

export type CreateProjectData = {
  body: ProjectCreate
  path?: never
  query?: never
  url: '/api/v1/projects'
}

export type CreateProjectErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type CreateProjectError = CreateProjectErrors[keyof CreateProjectErrors]

export type CreateProjectResponses = {
  /**
   * Successful Response
   */
  201: ProjectPublic
}

export type CreateProjectResponse =
  CreateProjectResponses[keyof CreateProjectResponses]

export type SearchProjectsData = {
  body?: never
  path?: never
  query: {
    /**
     * Query
     * Search query string
     */
    query: string
    /**
     * Page
     * Page number (1-indexed)
     */
    page?: number
    /**
     * Per Page
     * Number of items per page
     */
    per_page?: number
    /**
     * Sort By
     * Field to sort by
     */
    sort_by?: ('project_id' | 'name') | null
    /**
     * Sort Order
     * Sort order (asc or desc)
     */
    sort_order?: ('asc' | 'desc') | null
  }
  url: '/api/v1/projects/search'
}

export type SearchProjectsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type SearchProjectsError =
  SearchProjectsErrors[keyof SearchProjectsErrors]

export type SearchProjectsResponses = {
  /**
   * Successful Response
   */
  200: ProjectsPublic
}

export type SearchProjectsResponse =
  SearchProjectsResponses[keyof SearchProjectsResponses]

export type GetProjectByProjectIdData = {
  body?: never
  path: {
    /**
     * Project Id
     */
    project_id: string
  }
  query?: never
  url: '/api/v1/projects/{project_id}'
}

export type GetProjectByProjectIdErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetProjectByProjectIdError =
  GetProjectByProjectIdErrors[keyof GetProjectByProjectIdErrors]

export type GetProjectByProjectIdResponses = {
  /**
   * Successful Response
   */
  200: ProjectPublic
}

export type GetProjectByProjectIdResponse =
  GetProjectByProjectIdResponses[keyof GetProjectByProjectIdResponses]

export type GetSamplesData = {
  body?: never
  path: {
    /**
     * Project Id
     */
    project_id: string
  }
  query?: {
    /**
     * Page
     * Page number (1-indexed)
     */
    page?: number
    /**
     * Per Page
     * Number of items per page
     */
    per_page?: number
    /**
     * Sort By
     * Field to sort by
     */
    sort_by?: string
    /**
     * Sort Order
     * Sort order (asc or desc)
     */
    sort_order?: 'asc' | 'desc'
  }
  url: '/api/v1/projects/{project_id}/samples'
}

export type GetSamplesErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetSamplesError = GetSamplesErrors[keyof GetSamplesErrors]

export type GetSamplesResponses = {
  /**
   * Successful Response
   */
  200: SamplesPublic
}

export type GetSamplesResponse = GetSamplesResponses[keyof GetSamplesResponses]

export type AddSampleToProjectData = {
  body: SampleCreate
  path: {
    /**
     * Project Id
     */
    project_id: string
  }
  query?: never
  url: '/api/v1/projects/{project_id}/samples'
}

export type AddSampleToProjectErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type AddSampleToProjectError =
  AddSampleToProjectErrors[keyof AddSampleToProjectErrors]

export type AddSampleToProjectResponses = {
  /**
   * Successful Response
   */
  201: SamplePublic
}

export type AddSampleToProjectResponse =
  AddSampleToProjectResponses[keyof AddSampleToProjectResponses]

export type GetRunsData = {
  body?: never
  path?: never
  query?: {
    /**
     * Page
     * Page number (1-indexed)
     */
    page?: number
    /**
     * Per Page
     * Number of items per page
     */
    per_page?: number
    /**
     * Sort By
     * Field to sort by
     */
    sort_by?: string
    /**
     * Sort Order
     * Sort order (asc or desc)
     */
    sort_order?: 'asc' | 'desc'
  }
  url: '/api/v1/runs'
}

export type GetRunsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetRunsError = GetRunsErrors[keyof GetRunsErrors]

export type GetRunsResponses = {
  /**
   * Successful Response
   */
  200: SequencingRunsPublic
}

export type GetRunsResponse = GetRunsResponses[keyof GetRunsResponses]

export type AddRunData = {
  body: SequencingRunCreate
  path?: never
  query?: never
  url: '/api/v1/runs'
}

export type AddRunErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type AddRunError = AddRunErrors[keyof AddRunErrors]

export type AddRunResponses = {
  /**
   * Successful Response
   */
  201: SequencingRunPublic
}

export type AddRunResponse = AddRunResponses[keyof AddRunResponses]

export type SearchRunsData = {
  body?: never
  path?: never
  query: {
    /**
     * Query
     * Search query string
     */
    query: string
    /**
     * Page
     * Page number (1-indexed)
     */
    page?: number
    /**
     * Per Page
     * Number of items per page
     */
    per_page?: number
    /**
     * Sort By
     * Field to sort by
     */
    sort_by?: ('barcode' | 'experiment_name') | null
    /**
     * Sort Order
     * Sort order (asc or desc)
     */
    sort_order?: ('asc' | 'desc') | null
  }
  url: '/api/v1/runs/search'
}

export type SearchRunsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type SearchRunsError = SearchRunsErrors[keyof SearchRunsErrors]

export type SearchRunsResponses = {
  /**
   * Successful Response
   */
  200: SequencingRunsPublic
}

export type SearchRunsResponse = SearchRunsResponses[keyof SearchRunsResponses]

export type GetRunData = {
  body?: never
  path: {
    /**
     * Run Barcode
     */
    run_barcode: string
  }
  query?: never
  url: '/api/v1/runs/{run_barcode}'
}

export type GetRunErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetRunError = GetRunErrors[keyof GetRunErrors]

export type GetRunResponses = {
  /**
   * Successful Response
   */
  200: SequencingRunPublic
}

export type GetRunResponse = GetRunResponses[keyof GetRunResponses]

export type UpdateRunData = {
  body: SequencingRunUpdateRequest
  path: {
    /**
     * Run Barcode
     */
    run_barcode: string
  }
  query?: never
  url: '/api/v1/runs/{run_barcode}'
}

export type UpdateRunErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UpdateRunError = UpdateRunErrors[keyof UpdateRunErrors]

export type UpdateRunResponses = {
  /**
   * Successful Response
   */
  200: SequencingRunPublic
}

export type UpdateRunResponse = UpdateRunResponses[keyof UpdateRunResponses]

export type GetRunSamplesheetData = {
  body?: never
  path: {
    /**
     * Run Barcode
     */
    run_barcode: string
  }
  query?: never
  url: '/api/v1/runs/{run_barcode}/samplesheet'
}

export type GetRunSamplesheetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetRunSamplesheetError =
  GetRunSamplesheetErrors[keyof GetRunSamplesheetErrors]

export type GetRunSamplesheetResponses = {
  /**
   * Successful Response
   */
  200: IlluminaSampleSheetResponseModel
}

export type GetRunSamplesheetResponse =
  GetRunSamplesheetResponses[keyof GetRunSamplesheetResponses]

export type GetRunMetricsData = {
  body?: never
  path: {
    /**
     * Run Barcode
     */
    run_barcode: string
  }
  query?: never
  url: '/api/v1/runs/{run_barcode}/metrics'
}

export type GetRunMetricsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetRunMetricsError = GetRunMetricsErrors[keyof GetRunMetricsErrors]

export type GetRunMetricsResponses = {
  /**
   * Successful Response
   */
  200: IlluminaMetricsResponseModel
}

export type GetRunMetricsResponse =
  GetRunMetricsResponses[keyof GetRunMetricsResponses]

export type SearchData = {
  body?: never
  path?: never
  query: {
    /**
     * Query
     * Search query string
     */
    query: string
    /**
     * N Results
     * Number of results to return per index
     */
    n_results?: number
  }
  url: '/api/v1/search'
}

export type SearchErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type SearchError = SearchErrors[keyof SearchErrors]

export type SearchResponses = {
  /**
   * Successful Response
   */
  200: SearchResponse
}

export type SearchResponse2 = SearchResponses[keyof SearchResponses]

export type ListFilesData = {
  body?: never
  path?: never
  query?: {
    /**
     * Page
     * Page number (1-indexed)
     */
    page?: number
    /**
     * Per Page
     * Number of items per page
     */
    per_page?: number
    /**
     * Entity Type
     * Filter by entity type
     */
    entity_type?: EntityType | null
    /**
     * Entity Id
     * Filter by entity ID
     */
    entity_id?: string | null
    /**
     * File Type
     * Filter by file type
     */
    file_type?: FileType | null
    /**
     * Search
     * Search in filename and description
     */
    search?: string | null
    /**
     * Is Public
     * Filter by public/private status
     */
    is_public?: boolean | null
    /**
     * Created By
     * Filter by creator
     */
    created_by?: string | null
  }
  url: '/api/v1/files'
}

export type ListFilesErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ListFilesError = ListFilesErrors[keyof ListFilesErrors]

export type ListFilesResponses = {
  /**
   * Successful Response
   */
  200: PaginatedFileResponse
}

export type ListFilesResponse = ListFilesResponses[keyof ListFilesResponses]

export type CreateFileData = {
  body: BodyCreateFile
  path?: never
  query?: never
  url: '/api/v1/files'
}

export type CreateFileErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type CreateFileError = CreateFileErrors[keyof CreateFileErrors]

export type CreateFileResponses = {
  /**
   * Successful Response
   */
  201: FilePublic
}

export type CreateFileResponse = CreateFileResponses[keyof CreateFileResponses]

export type BrowseFilesystemData = {
  body?: never
  path?: never
  query?: {
    /**
     * Directory Path
     * Directory path to browse (local path or s3://bucket/key)
     */
    directory_path?: string
    /**
     * Storage Root
     * Storage root directory (ignored for S3 paths)
     */
    storage_root?: string
  }
  url: '/api/v1/files/browse'
}

export type BrowseFilesystemErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type BrowseFilesystemError =
  BrowseFilesystemErrors[keyof BrowseFilesystemErrors]

export type BrowseFilesystemResponses = {
  /**
   * Successful Response
   */
  200: FileBrowserData
}

export type BrowseFilesystemResponse =
  BrowseFilesystemResponses[keyof BrowseFilesystemResponses]

export type ListFilesBrowserFormatData = {
  body?: never
  path?: never
  query?: {
    /**
     * Page
     * Page number (1-indexed)
     */
    page?: number
    /**
     * Per Page
     * Number of items per page
     */
    per_page?: number
    /**
     * Entity Type
     * Filter by entity type
     */
    entity_type?: EntityType | null
    /**
     * Entity Id
     * Filter by entity ID
     */
    entity_id?: string | null
    /**
     * File Type
     * Filter by file type
     */
    file_type?: FileType | null
    /**
     * Search
     * Search in filename and description
     */
    search?: string | null
    /**
     * Is Public
     * Filter by public/private status
     */
    is_public?: boolean | null
    /**
     * Created By
     * Filter by creator
     */
    created_by?: string | null
  }
  url: '/api/v1/files/browse-db'
}

export type ListFilesBrowserFormatErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ListFilesBrowserFormatError =
  ListFilesBrowserFormatErrors[keyof ListFilesBrowserFormatErrors]

export type ListFilesBrowserFormatResponses = {
  /**
   * Successful Response
   */
  200: FileBrowserData
}

export type ListFilesBrowserFormatResponse =
  ListFilesBrowserFormatResponses[keyof ListFilesBrowserFormatResponses]

export type DeleteFileData = {
  body?: never
  path: {
    /**
     * File Id
     */
    file_id: string
  }
  query?: never
  url: '/api/v1/files/{file_id}'
}

export type DeleteFileErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type DeleteFileError = DeleteFileErrors[keyof DeleteFileErrors]

export type DeleteFileResponses = {
  /**
   * Successful Response
   */
  204: void
}

export type DeleteFileResponse = DeleteFileResponses[keyof DeleteFileResponses]

export type GetFileData = {
  body?: never
  path: {
    /**
     * File Id
     */
    file_id: string
  }
  query?: never
  url: '/api/v1/files/{file_id}'
}

export type GetFileErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetFileError = GetFileErrors[keyof GetFileErrors]

export type GetFileResponses = {
  /**
   * Successful Response
   */
  200: FilePublic
}

export type GetFileResponse = GetFileResponses[keyof GetFileResponses]

export type UpdateFileData = {
  body: FileUpdate
  path: {
    /**
     * File Id
     */
    file_id: string
  }
  query?: never
  url: '/api/v1/files/{file_id}'
}

export type UpdateFileErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UpdateFileError = UpdateFileErrors[keyof UpdateFileErrors]

export type UpdateFileResponses = {
  /**
   * Successful Response
   */
  200: FilePublic
}

export type UpdateFileResponse = UpdateFileResponses[keyof UpdateFileResponses]

export type DownloadFileData = {
  body?: never
  path: {
    /**
     * File Id
     */
    file_id: string
  }
  query?: never
  url: '/api/v1/files/{file_id}/content'
}

export type DownloadFileErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type DownloadFileError = DownloadFileErrors[keyof DownloadFileErrors]

export type DownloadFileResponses = {
  /**
   * Successful Response
   */
  200: unknown
}

export type UploadFileContentData = {
  body: BodyUploadFileContent
  path: {
    /**
     * File Id
     */
    file_id: string
  }
  query?: never
  url: '/api/v1/files/{file_id}/content'
}

export type UploadFileContentErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UploadFileContentError =
  UploadFileContentErrors[keyof UploadFileContentErrors]

export type UploadFileContentResponses = {
  /**
   * Successful Response
   */
  200: FilePublic
}

export type UploadFileContentResponse =
  UploadFileContentResponses[keyof UploadFileContentResponses]

export type ListFilesForEntityData = {
  body?: never
  path: {
    entity_type: EntityType
    /**
     * Entity Id
     */
    entity_id: string
  }
  query?: {
    /**
     * Page
     * Page number (1-indexed)
     */
    page?: number
    /**
     * Per Page
     * Number of items per page
     */
    per_page?: number
    /**
     * File Type
     * Filter by file type
     */
    file_type?: FileType | null
  }
  url: '/api/v1/files/entity/{entity_type}/{entity_id}'
}

export type ListFilesForEntityErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ListFilesForEntityError =
  ListFilesForEntityErrors[keyof ListFilesForEntityErrors]

export type ListFilesForEntityResponses = {
  /**
   * Successful Response
   */
  200: PaginatedFileResponse
}

export type ListFilesForEntityResponse =
  ListFilesForEntityResponses[keyof ListFilesForEntityResponses]

export type GetFileCountForEntityData = {
  body?: never
  path: {
    entity_type: EntityType
    /**
     * Entity Id
     */
    entity_id: string
  }
  query?: never
  url: '/api/v1/files/entity/{entity_type}/{entity_id}/count'
}

export type GetFileCountForEntityErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetFileCountForEntityError =
  GetFileCountForEntityErrors[keyof GetFileCountForEntityErrors]

export type GetFileCountForEntityResponses = {
  /**
   * Response Get File Count For Entity
   * Successful Response
   */
  200: {
    [key: string]: unknown
  }
}

export type GetFileCountForEntityResponse =
  GetFileCountForEntityResponses[keyof GetFileCountForEntityResponses]

export type ClientOptions = {
  baseURL: 'http://apiserver:3000' | (string & {})
}
