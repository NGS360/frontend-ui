// This file is auto-generated by @hey-api/openapi-ts

/**
 * Attribute
 */
export type Attribute = {
  /**
   * Key
   */
  key: string | null
  /**
   * Value
   */
  value: string | null
}

/**
 * GenericSearchResponse
 * Fallback response model for other search types
 */
export type GenericSearchResponse = {
  /**
   * Total Items
   */
  total_items?: number
  /**
   * Total Pages
   */
  total_pages?: number
  /**
   * Current Page
   */
  current_page?: number
  /**
   * Per Page
   */
  per_page?: number
  /**
   * Has Next
   */
  has_next?: boolean
  /**
   * Has Prev
   */
  has_prev?: boolean
  /**
   * Data
   */
  data?: Array<SearchDocument>
}

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
  /**
   * Detail
   */
  detail?: Array<ValidationError>
}

/**
 * ProjectCreate
 */
export type ProjectCreate = {
  /**
   * Name
   */
  name: string
  /**
   * Attributes
   */
  attributes?: Array<Attribute> | null
}

/**
 * ProjectPublic
 */
export type ProjectPublic = {
  /**
   * Project Id
   */
  project_id: string
  /**
   * Name
   */
  name: string | null
  /**
   * Attributes
   */
  attributes: Array<Attribute> | null
}

/**
 * ProjectSearchResponse
 * Response model for project searches
 */
export type ProjectSearchResponse = {
  /**
   * Total Items
   */
  total_items?: number
  /**
   * Total Pages
   */
  total_pages?: number
  /**
   * Current Page
   */
  current_page?: number
  /**
   * Per Page
   */
  per_page?: number
  /**
   * Has Next
   */
  has_next?: boolean
  /**
   * Has Prev
   */
  has_prev?: boolean
  /**
   * Projects
   */
  projects?: Array<ProjectPublic>
}

/**
 * ProjectsPublic
 */
export type ProjectsPublic = {
  /**
   * Data
   */
  data: Array<ProjectPublic>
  /**
   * Total Items
   */
  total_items: number
  /**
   * Total Pages
   */
  total_pages: number
  /**
   * Current Page
   */
  current_page: number
  /**
   * Per Page
   */
  per_page: number
  /**
   * Has Next
   */
  has_next: boolean
  /**
   * Has Prev
   */
  has_prev: boolean
}

/**
 * RunSearchResponse
 * Response model for sequencing run searches
 */
export type RunSearchResponse = {
  /**
   * Total Items
   */
  total_items?: number
  /**
   * Total Pages
   */
  total_pages?: number
  /**
   * Current Page
   */
  current_page?: number
  /**
   * Per Page
   */
  per_page?: number
  /**
   * Has Next
   */
  has_next?: boolean
  /**
   * Has Prev
   */
  has_prev?: boolean
  /**
   * Illumina Runs
   */
  illumina_runs?: Array<SequencingRunPublic>
}

/**
 * SampleCreate
 */
export type SampleCreate = {
  /**
   * Sample Id
   */
  sample_id: string
  /**
   * Attributes
   */
  attributes?: Array<Attribute> | null
}

/**
 * SamplePublic
 */
export type SamplePublic = {
  /**
   * Sample Id
   */
  sample_id: string
  /**
   * Project Id
   */
  project_id: string
  /**
   * Attributes
   */
  attributes: Array<Attribute> | null
}

/**
 * SamplesPublic
 */
export type SamplesPublic = {
  /**
   * Data
   */
  data: Array<SamplePublic>
  /**
   * Total Items
   */
  total_items: number
  /**
   * Total Pages
   */
  total_pages: number
  /**
   * Current Page
   */
  current_page: number
  /**
   * Per Page
   */
  per_page: number
  /**
   * Has Next
   */
  has_next: boolean
  /**
   * Has Prev
   */
  has_prev: boolean
}

/**
 * SearchDocument
 */
export type SearchDocument = {
  /**
   * Id
   */
  id: string
  /**
   * Body
   */
  body: unknown
}

/**
 * SearchResponse
 */
export type SearchResponse = {
  projects: ProjectsPublic
  runs: SequencingRunsPublic
}

/**
 * SequencingRunCreate
 */
export type SequencingRunCreate = {
  /**
   * Run Date
   */
  run_date: string
  /**
   * Machine Id
   */
  machine_id: string
  /**
   * Run Number
   */
  run_number: number
  /**
   * Flowcell Id
   */
  flowcell_id: string
  /**
   * Experiment Name
   */
  experiment_name?: string | null
  /**
   * S3 Run Folder Path
   */
  s3_run_folder_path?: string | null
  /**
   * Status
   */
  status?: string | null
  /**
   * Run Time
   */
  run_time?: string | null
}

/**
 * SequencingRunPublic
 */
export type SequencingRunPublic = {
  /**
   * Run Date
   */
  run_date: string
  /**
   * Machine Id
   */
  machine_id: string
  /**
   * Run Number
   */
  run_number: number
  /**
   * Flowcell Id
   */
  flowcell_id: string
  /**
   * Experiment Name
   */
  experiment_name: string | null
  /**
   * S3 Run Folder Path
   */
  s3_run_folder_path: string | null
  /**
   * Status
   */
  status: string | null
  /**
   * Run Time
   */
  run_time: string | null
  /**
   * Barcode
   */
  barcode: string | null
}

/**
 * SequencingRunsPublic
 */
export type SequencingRunsPublic = {
  /**
   * Data
   */
  data: Array<SequencingRunPublic>
  /**
   * Total Items
   */
  total_items: number
  /**
   * Total Pages
   */
  total_pages: number
  /**
   * Current Page
   */
  current_page: number
  /**
   * Per Page
   */
  per_page: number
  /**
   * Has Next
   */
  has_next: boolean
  /**
   * Has Prev
   */
  has_prev: boolean
}

/**
 * ValidationError
 */
export type ValidationError = {
  /**
   * Location
   */
  loc: Array<string | number>
  /**
   * Message
   */
  msg: string
  /**
   * Error Type
   */
  type: string
}

export type RootData = {
  body?: never
  path?: never
  query?: never
  url: '/'
}

export type RootResponses = {
  /**
   * Successful Response
   */
  200: unknown
}

export type GetProjectsData = {
  body?: never
  path?: never
  query?: {
    /**
     * Page
     * Page number (1-indexed)
     */
    page?: number
    /**
     * Per Page
     * Number of items per page
     */
    per_page?: number
    /**
     * Sort By
     * Field to sort by
     */
    sort_by?: string
    /**
     * Sort Order
     * Sort order (asc or desc)
     */
    sort_order?: 'asc' | 'desc'
  }
  url: '/api/v1/projects'
}

export type GetProjectsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetProjectsError = GetProjectsErrors[keyof GetProjectsErrors]

export type GetProjectsResponses = {
  /**
   * Successful Response
   */
  200: ProjectsPublic
}

export type GetProjectsResponse =
  GetProjectsResponses[keyof GetProjectsResponses]

export type CreateProjectData = {
  body: ProjectCreate
  path?: never
  query?: never
  url: '/api/v1/projects'
}

export type CreateProjectErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type CreateProjectError = CreateProjectErrors[keyof CreateProjectErrors]

export type CreateProjectResponses = {
  /**
   * Successful Response
   */
  201: ProjectPublic
}

export type CreateProjectResponse =
  CreateProjectResponses[keyof CreateProjectResponses]

export type SearchProjectsData = {
  body?: never
  path?: never
  query: {
    /**
     * Query
     * Search query string
     */
    query: string | null
    /**
     * Page
     * Page number (1-indexed)
     */
    page?: number
    /**
     * Per Page
     * Number of items per page
     */
    per_page?: number
    /**
     * Sort By
     * Field to sort by
     */
    sort_by?: ('project_id' | 'name') | null
    /**
     * Sort Order
     * Sort order (asc or desc)
     */
    sort_order?: ('asc' | 'desc') | null
  }
  url: '/api/v1/projects/search'
}

export type SearchProjectsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type SearchProjectsError =
  SearchProjectsErrors[keyof SearchProjectsErrors]

export type SearchProjectsResponses = {
  /**
   * Successful Response
   */
  200: ProjectsPublic
}

export type SearchProjectsResponse =
  SearchProjectsResponses[keyof SearchProjectsResponses]

export type GetProjectByProjectIdData = {
  body?: never
  path: {
    /**
     * Project Id
     */
    project_id: string
  }
  query?: never
  url: '/api/v1/projects/{project_id}'
}

export type GetProjectByProjectIdErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetProjectByProjectIdError =
  GetProjectByProjectIdErrors[keyof GetProjectByProjectIdErrors]

export type GetProjectByProjectIdResponses = {
  /**
   * Successful Response
   */
  200: ProjectPublic
}

export type GetProjectByProjectIdResponse =
  GetProjectByProjectIdResponses[keyof GetProjectByProjectIdResponses]

export type GetSamplesData = {
  body?: never
  path: {
    /**
     * Project Id
     */
    project_id: string
  }
  query?: {
    /**
     * Page
     * Page number (1-indexed)
     */
    page?: number
    /**
     * Per Page
     * Number of items per page
     */
    per_page?: number
    /**
     * Sort By
     * Field to sort by
     */
    sort_by?: string
    /**
     * Sort Order
     * Sort order (asc or desc)
     */
    sort_order?: 'asc' | 'desc'
  }
  url: '/api/v1/projects/{project_id}/samples'
}

export type GetSamplesErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetSamplesError = GetSamplesErrors[keyof GetSamplesErrors]

export type GetSamplesResponses = {
  /**
   * Successful Response
   */
  200: SamplesPublic
}

export type GetSamplesResponse = GetSamplesResponses[keyof GetSamplesResponses]

export type AddSampleToProjectData = {
  body: SampleCreate
  path: {
    /**
     * Project Id
     */
    project_id: string
  }
  query?: never
  url: '/api/v1/projects/{project_id}/samples'
}

export type AddSampleToProjectErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type AddSampleToProjectError =
  AddSampleToProjectErrors[keyof AddSampleToProjectErrors]

export type AddSampleToProjectResponses = {
  /**
   * Successful Response
   */
  201: SamplePublic
}

export type AddSampleToProjectResponse =
  AddSampleToProjectResponses[keyof AddSampleToProjectResponses]

export type GetRunsData = {
  body?: never
  path?: never
  query?: {
    /**
     * Page
     * Page number (1-indexed)
     */
    page?: number
    /**
     * Per Page
     * Number of items per page
     */
    per_page?: number
    /**
     * Sort By
     * Field to sort by
     */
    sort_by?: string
    /**
     * Sort Order
     * Sort order (asc or desc)
     */
    sort_order?: 'asc' | 'desc'
  }
  url: '/api/v1/runs'
}

export type GetRunsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetRunsError = GetRunsErrors[keyof GetRunsErrors]

export type GetRunsResponses = {
  /**
   * Successful Response
   */
  200: SequencingRunsPublic
}

export type GetRunsResponse = GetRunsResponses[keyof GetRunsResponses]

export type AddRunData = {
  body: SequencingRunCreate
  path?: never
  query?: never
  url: '/api/v1/runs'
}

export type AddRunErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type AddRunError = AddRunErrors[keyof AddRunErrors]

export type AddRunResponses = {
  /**
   * Successful Response
   */
  201: SequencingRunPublic
}

export type AddRunResponse = AddRunResponses[keyof AddRunResponses]

export type SearchRunsData = {
  body?: never
  path?: never
  query: {
    /**
     * Query
     * Search query string
     */
    query: string | null
    /**
     * Page
     * Page number (1-indexed)
     */
    page?: number
    /**
     * Per Page
     * Number of items per page
     */
    per_page?: number
    /**
     * Sort By
     * Field to sort by
     */
    sort_by?: ('barcode' | 'experiment_name') | null
    /**
     * Sort Order
     * Sort order (asc or desc)
     */
    sort_order?: ('asc' | 'desc') | null
  }
  url: '/api/v1/runs/search'
}

export type SearchRunsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type SearchRunsError = SearchRunsErrors[keyof SearchRunsErrors]

export type SearchRunsResponses = {
  /**
   * Successful Response
   */
  200: SequencingRunsPublic
}

export type SearchRunsResponse = SearchRunsResponses[keyof SearchRunsResponses]

export type GetRunData = {
  body?: never
  path: {
    /**
     * Run Barcode
     */
    run_barcode: string
  }
  query?: never
  url: '/api/v1/runs/{run_barcode}'
}

export type GetRunErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetRunError = GetRunErrors[keyof GetRunErrors]

export type GetRunResponses = {
  /**
   * Successful Response
   */
  200: SequencingRunPublic
}

export type GetRunResponse = GetRunResponses[keyof GetRunResponses]

export type SearchOriginalData = {
  body?: never
  path?: never
  query: {
    /**
     * Index
     * Index to search
     */
    index: string
    /**
     * Query
     * Search query string
     */
    query: string
    /**
     * Page
     * Page number (1-indexed)
     */
    page?: number
    /**
     * Per Page
     * Number of items per page
     */
    per_page?: number
    /**
     * Sort By
     * Field to sort by (id, name)
     */
    sort_by?: string | null
    /**
     * Sort Order
     * Sort order (asc or desc)
     */
    sort_order?: ('asc' | 'desc') | null
  }
  url: '/api/v1/search_original'
}

export type SearchOriginalErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type SearchOriginalError =
  SearchOriginalErrors[keyof SearchOriginalErrors]

export type SearchOriginalResponses = {
  /**
   * Response Search Original
   * Successful Response
   */
  200: ProjectSearchResponse | RunSearchResponse | GenericSearchResponse
}

export type SearchOriginalResponse =
  SearchOriginalResponses[keyof SearchOriginalResponses]

export type SearchData = {
  body?: never
  path?: never
  query: {
    /**
     * Query
     * Search query string
     */
    query: string
    /**
     * N Results
     * Number of results to return per index
     */
    n_results?: number
  }
  url: '/api/v1/search'
}

export type SearchErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type SearchError = SearchErrors[keyof SearchErrors]

export type SearchResponses = {
  /**
   * Successful Response
   */
  200: SearchResponse
}

export type SearchResponse2 = SearchResponses[keyof SearchResponses]

export type ClientOptions = {
  baseURL: 'http://apiserver:3000' | (string & {})
}
