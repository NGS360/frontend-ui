// This file is auto-generated by @hey-api/openapi-ts

import { client as _heyApiClient } from './client.gen'
import type { Client, Options as ClientOptions, TDataShape } from './client'
import type {
  AddRunData,
  AddRunErrors,
  AddRunResponses,
  AddSampleToProjectData,
  AddSampleToProjectErrors,
  AddSampleToProjectResponses,
  CreateProjectData,
  CreateProjectErrors,
  CreateProjectResponses,
  GetProjectByProjectIdData,
  GetProjectByProjectIdErrors,
  GetProjectByProjectIdResponses,
  GetProjectsData,
  GetProjectsErrors,
  GetProjectsResponses,
  GetRunData,
  GetRunErrors,
  GetRunResponses,
  GetRunsData,
  GetRunsErrors,
  GetRunsResponses,
  GetSamplesData,
  GetSamplesErrors,
  GetSamplesResponses,
  RootData,
  RootResponses,
  SearchData,
  SearchErrors,
  SearchOriginalData,
  SearchOriginalErrors,
  SearchOriginalResponses,
  SearchProjectsData,
  SearchProjectsErrors,
  SearchProjectsResponses,
  SearchResponses,
  SearchRunsData,
  SearchRunsErrors,
  SearchRunsResponses,
} from './types.gen'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

/**
 * Root
 */
export const root = <ThrowOnError extends boolean = false>(
  options?: Options<RootData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    RootResponses,
    unknown,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/',
    ...options,
  })
}

/**
 * Get Projects
 * Returns a paginated list of projects.
 */
export const getProjects = <ThrowOnError extends boolean = false>(
  options?: Options<GetProjectsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetProjectsResponses,
    GetProjectsErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/projects',
    ...options,
  })
}

/**
 * Create Project
 * Create a new project with optional attributes.
 */
export const createProject = <ThrowOnError extends boolean = false>(
  options: Options<CreateProjectData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateProjectResponses,
    CreateProjectErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/projects',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Search Projects
 */
export const searchProjects = <ThrowOnError extends boolean = false>(
  options: Options<SearchProjectsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    SearchProjectsResponses,
    SearchProjectsErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/projects/search',
    ...options,
  })
}

/**
 * Get Project By Project Id
 * Returns a single project by its project_id.
 * Note: This is different from its internal "id".
 */
export const getProjectByProjectId = <ThrowOnError extends boolean = false>(
  options: Options<GetProjectByProjectIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetProjectByProjectIdResponses,
    GetProjectByProjectIdErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/projects/{project_id}',
    ...options,
  })
}

/**
 * Get Samples
 * Returns a paginated list of samples.
 */
export const getSamples = <ThrowOnError extends boolean = false>(
  options: Options<GetSamplesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetSamplesResponses,
    GetSamplesErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/projects/{project_id}/samples',
    ...options,
  })
}

/**
 * Add Sample To Project
 * Create a new sample with optional attributes.
 */
export const addSampleToProject = <ThrowOnError extends boolean = false>(
  options: Options<AddSampleToProjectData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    AddSampleToProjectResponses,
    AddSampleToProjectErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/projects/{project_id}/samples',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Get Runs
 * Retrieve a list of all sequencing runs.
 */
export const getRuns = <ThrowOnError extends boolean = false>(
  options?: Options<GetRunsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetRunsResponses,
    GetRunsErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/runs',
    ...options,
  })
}

/**
 * Add Run
 * Create a new project with optional attributes.
 */
export const addRun = <ThrowOnError extends boolean = false>(
  options: Options<AddRunData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    AddRunResponses,
    AddRunErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/runs',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Search Runs
 */
export const searchRuns = <ThrowOnError extends boolean = false>(
  options: Options<SearchRunsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    SearchRunsResponses,
    SearchRunsErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/runs/search',
    ...options,
  })
}

/**
 * Get Run
 * Retrieve a sequencing run.
 */
export const getRun = <ThrowOnError extends boolean = false>(
  options: Options<GetRunData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetRunResponses,
    GetRunErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/runs/{run_barcode}',
    ...options,
  })
}

/**
 * Search Original
 * Perform a search with pagination and sorting.
 */
export const searchOriginal = <ThrowOnError extends boolean = false>(
  options: Options<SearchOriginalData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    SearchOriginalResponses,
    SearchOriginalErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/search_original',
    ...options,
  })
}

/**
 * Search
 */
export const search = <ThrowOnError extends boolean = false>(
  options: Options<SearchData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    SearchResponses,
    SearchErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/search',
    ...options,
  })
}
