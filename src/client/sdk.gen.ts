// This file is auto-generated by @hey-api/openapi-ts

import { client as _heyApiClient } from './client.gen'
import type { Client, Options as ClientOptions, TDataShape } from './client'
import type {
  CreateProjectData,
  CreateProjectErrors,
  CreateProjectResponses,
  GetProjectByProjectIdData,
  GetProjectByProjectIdErrors,
  GetProjectByProjectIdResponses,
  ReadProjectsData,
  ReadProjectsErrors,
  ReadProjectsResponses,
  RootData,
  RootResponses,
} from './types.gen'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

/**
 * Root
 */
export const root = <ThrowOnError extends boolean = false>(
  options?: Options<RootData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    RootResponses,
    unknown,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/',
    ...options,
  })
}

/**
 * Create Project
 * Create a new project with optional attributes.
 */
export const createProject = <ThrowOnError extends boolean = false>(
  options: Options<CreateProjectData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateProjectResponses,
    CreateProjectErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/project/create_project',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Read Projects
 * Returns a paginated list of projects.
 */
export const readProjects = <ThrowOnError extends boolean = false>(
  options?: Options<ReadProjectsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ReadProjectsResponses,
    ReadProjectsErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/project/read_projects',
    ...options,
  })
}

/**
 * Get Project By Project Id
 * Returns a single project by its project_id.
 * Note: This is different from its internal "id".
 */
export const getProjectByProjectId = <ThrowOnError extends boolean = false>(
  options: Options<GetProjectByProjectIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetProjectByProjectIdResponses,
    GetProjectByProjectIdErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/project/{project_id}',
    ...options,
  })
}
