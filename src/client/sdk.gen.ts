// This file is auto-generated by @hey-api/openapi-ts

import {
  
  
  
  formDataBodySerializer
} from './client'
import { client as _heyApiClient } from './client.gen'
import type {Client, Options as ClientOptions, TDataShape} from './client';
import type {
  AddRunData,
  AddRunErrors,
  AddRunResponses,
  AddSampleToProjectData,
  AddSampleToProjectErrors,
  AddSampleToProjectResponses,
  BrowseFilesystemData,
  BrowseFilesystemErrors,
  BrowseFilesystemResponses,
  CreateFileData,
  CreateFileErrors,
  CreateFileResponses,
  CreateProjectData,
  CreateProjectErrors,
  CreateProjectResponses,
  DeleteFileData,
  DeleteFileErrors,
  DeleteFileResponses,
  DownloadFileData,
  DownloadFileErrors,
  DownloadFileResponses,
  GetFileCountForEntityData,
  GetFileCountForEntityErrors,
  GetFileCountForEntityResponses,
  GetFileData,
  GetFileErrors,
  GetFileResponses,
  GetProjectByProjectIdData,
  GetProjectByProjectIdErrors,
  GetProjectByProjectIdResponses,
  GetProjectsData,
  GetProjectsErrors,
  GetProjectsResponses,
  GetRunData,
  GetRunErrors,
  GetRunMetricsData,
  GetRunMetricsErrors,
  GetRunMetricsResponses,
  GetRunResponses,
  GetRunSamplesheetData,
  GetRunSamplesheetErrors,
  GetRunSamplesheetResponses,
  GetRunsData,
  GetRunsErrors,
  GetRunsResponses,
  GetSamplesData,
  GetSamplesErrors,
  GetSamplesResponses,
  ListFilesBrowserFormatData,
  ListFilesBrowserFormatErrors,
  ListFilesBrowserFormatResponses,
  ListFilesData,
  ListFilesErrors,
  ListFilesForEntityData,
  ListFilesForEntityErrors,
  ListFilesForEntityResponses,
  ListFilesResponses,
  RootData,
  RootResponses,
  SearchData,
  SearchErrors,
  SearchProjectsData,
  SearchProjectsErrors,
  SearchProjectsResponses,
  SearchResponses,
  SearchRunsData,
  SearchRunsErrors,
  SearchRunsResponses,
  UpdateFileData,
  UpdateFileErrors,
  UpdateFileResponses,
  UpdateRunData,
  UpdateRunErrors,
  UpdateRunResponses,
  UploadFileContentData,
  UploadFileContentErrors,
  UploadFileContentResponses,
} from './types.gen'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

/**
 * Root
 */
export const root = <ThrowOnError extends boolean = false>(
  options?: Options<RootData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    RootResponses,
    unknown,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/',
    ...options,
  })
}

/**
 * Get Projects
 * Returns a paginated list of projects.
 */
export const getProjects = <ThrowOnError extends boolean = false>(
  options?: Options<GetProjectsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetProjectsResponses,
    GetProjectsErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/projects',
    ...options,
  })
}

/**
 * Create Project
 * Create a new project with optional attributes.
 */
export const createProject = <ThrowOnError extends boolean = false>(
  options: Options<CreateProjectData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateProjectResponses,
    CreateProjectErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/projects',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Search Projects
 */
export const searchProjects = <ThrowOnError extends boolean = false>(
  options: Options<SearchProjectsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    SearchProjectsResponses,
    SearchProjectsErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/projects/search',
    ...options,
  })
}

/**
 * Get Project By Project Id
 * Returns a single project by its project_id.
 * Note: This is different from its internal "id".
 */
export const getProjectByProjectId = <ThrowOnError extends boolean = false>(
  options: Options<GetProjectByProjectIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetProjectByProjectIdResponses,
    GetProjectByProjectIdErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/projects/{project_id}',
    ...options,
  })
}

/**
 * Get Samples
 * Returns a paginated list of samples.
 */
export const getSamples = <ThrowOnError extends boolean = false>(
  options: Options<GetSamplesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetSamplesResponses,
    GetSamplesErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/projects/{project_id}/samples',
    ...options,
  })
}

/**
 * Add Sample To Project
 * Create a new sample with optional attributes.
 */
export const addSampleToProject = <ThrowOnError extends boolean = false>(
  options: Options<AddSampleToProjectData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    AddSampleToProjectResponses,
    AddSampleToProjectErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/projects/{project_id}/samples',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Get Runs
 * Retrieve a list of all sequencing runs.
 */
export const getRuns = <ThrowOnError extends boolean = false>(
  options?: Options<GetRunsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetRunsResponses,
    GetRunsErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/runs',
    ...options,
  })
}

/**
 * Add Run
 * Create a new project with optional attributes.
 */
export const addRun = <ThrowOnError extends boolean = false>(
  options: Options<AddRunData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    AddRunResponses,
    AddRunErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/runs',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Search Runs
 * Search for sequencing runs using OpenSearch.
 */
export const searchRuns = <ThrowOnError extends boolean = false>(
  options: Options<SearchRunsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    SearchRunsResponses,
    SearchRunsErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/runs/search',
    ...options,
  })
}

/**
 * Get Run
 * Retrieve a sequencing run.
 */
export const getRun = <ThrowOnError extends boolean = false>(
  options: Options<GetRunData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetRunResponses,
    GetRunErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/runs/{run_barcode}',
    ...options,
  })
}

/**
 * Update Run
 * Update the status of a specific run.
 * Valid status values are: "In Progress", "Uploading", "Ready", "Resync"
 */
export const updateRun = <ThrowOnError extends boolean = false>(
  options: Options<UpdateRunData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateRunResponses,
    UpdateRunErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/runs/{run_barcode}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Get Run Samplesheet
 * Retrieve the sample sheet for a specific run.
 */
export const getRunSamplesheet = <ThrowOnError extends boolean = false>(
  options: Options<GetRunSamplesheetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetRunSamplesheetResponses,
    GetRunSamplesheetErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/runs/{run_barcode}/samplesheet',
    ...options,
  })
}

/**
 * Get Run Metrics
 * Retrieve demultiplexing metrics for a specific run.
 */
export const getRunMetrics = <ThrowOnError extends boolean = false>(
  options: Options<GetRunMetricsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetRunMetricsResponses,
    GetRunMetricsErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/runs/{run_barcode}/metrics',
    ...options,
  })
}

/**
 * Search
 */
export const search = <ThrowOnError extends boolean = false>(
  options: Options<SearchData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    SearchResponses,
    SearchErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/search',
    ...options,
  })
}

/**
 * List files with filtering and pagination
 * Get a paginated list of files with optional filtering.
 *
 * Supports filtering by:
 * - Entity type and ID (project or run)
 * - File type (fastq, bam, vcf, etc.)
 * - Public/private status
 * - Creator
 * - Text search in filename and description
 */
export const listFiles = <ThrowOnError extends boolean = false>(
  options?: Options<ListFilesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListFilesResponses,
    ListFilesErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/files',
    ...options,
  })
}

/**
 * Create a new file record
 * Create a new file record with optional file content upload.
 *
 * - **filename**: Name of the file
 * - **description**: Optional description of the file
 * - **file_type**: Type of file (fastq, bam, vcf, etc.)
 * - **entity_type**: Whether this file belongs to a project or run
 * - **entity_id**: ID of the project or run this file belongs to
 * - **is_public**: Whether the file is publicly accessible
 * - **created_by**: User who created the file
 */
export const createFile = <ThrowOnError extends boolean = false>(
  options: Options<CreateFileData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateFileResponses,
    CreateFileErrors,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    responseType: 'json',
    url: '/api/v1/files',
    ...options,
    headers: {
      'Content-Type': null,
      ...options.headers,
    },
  })
}

/**
 * Browse filesystem directory
 * Browse a filesystem directory or S3 bucket and return folders and files in structured format.
 *
 * Supports both local filesystem and AWS S3:
 * - **Local paths**: Relative to storage_root (empty for root) or absolute paths
 * - **S3 paths**: Use s3://bucket/key format (e.g., s3://my-bucket/path/to/folder/)
 * - **storage_root**: Base storage directory for local paths (ignored for S3)
 *
 * Returns separate arrays for folders and files with name, date, and size information.
 *
 * For S3 paths:
 * - Requires AWS credentials to be configured
 * - Folders represent S3 prefixes (common prefixes)
 * - Files show S3 object metadata (size, last modified)
 *
 * Examples:
 * - Local: `/browse?directory_path=project1/data`
 * - S3: `/browse?directory_path=s3://my-bucket/project1/data/`
 */
export const browseFilesystem = <ThrowOnError extends boolean = false>(
  options?: Options<BrowseFilesystemData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    BrowseFilesystemResponses,
    BrowseFilesystemErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/files/browse',
    ...options,
  })
}

/**
 * List database files in browser format
 * Get database files in FileBrowserData format (files only, no folders).
 *
 * This endpoint returns the same file data as the regular list_files endpoint,
 * but formatted to match the FileBrowserData structure with separate folders and files arrays.
 * Since database files don't have folder structure, the folders array will be empty.
 */
export const listFilesBrowserFormat = <ThrowOnError extends boolean = false>(
  options?: Options<ListFilesBrowserFormatData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListFilesBrowserFormatResponses,
    ListFilesBrowserFormatErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/files/browse-db',
    ...options,
  })
}

/**
 * Delete file
 * Delete a file and its content.
 *
 * - **file_id**: The unique file identifier
 */
export const deleteFile = <ThrowOnError extends boolean = false>(
  options: Options<DeleteFileData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteFileResponses,
    DeleteFileErrors,
    ThrowOnError
  >({
    url: '/api/v1/files/{file_id}',
    ...options,
  })
}

/**
 * Get file by ID
 * Get a single file by its file_id.
 *
 * - **file_id**: The unique file identifier
 */
export const getFile = <ThrowOnError extends boolean = false>(
  options: Options<GetFileData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetFileResponses,
    GetFileErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/files/{file_id}',
    ...options,
  })
}

/**
 * Update file metadata
 * Update file metadata.
 *
 * - **file_id**: The unique file identifier
 * - **file_update**: Fields to update
 */
export const updateFile = <ThrowOnError extends boolean = false>(
  options: Options<UpdateFileData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateFileResponses,
    UpdateFileErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/files/{file_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Download file content
 * Download the content of a file.
 *
 * - **file_id**: The unique file identifier
 */
export const downloadFile = <ThrowOnError extends boolean = false>(
  options: Options<DownloadFileData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    DownloadFileResponses,
    DownloadFileErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/files/{file_id}/content',
    ...options,
  })
}

/**
 * Upload file content
 * Upload content for an existing file record.
 *
 * - **file_id**: The unique file identifier
 * - **content**: The file content to upload
 */
export const uploadFileContent = <ThrowOnError extends boolean = false>(
  options: Options<UploadFileContentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    UploadFileContentResponses,
    UploadFileContentErrors,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    responseType: 'json',
    url: '/api/v1/files/{file_id}/content',
    ...options,
    headers: {
      'Content-Type': null,
      ...options.headers,
    },
  })
}

/**
 * List files for a specific entity.
 * Get all files associated with a specific project or run.
 * This is the same as /api/v1/files, but scoped to a specific entity.
 *
 * - **entity_type**: Either "project" or "run"
 * - **entity_id**: The project ID or run barcode
 */
export const listFilesForEntity = <ThrowOnError extends boolean = false>(
  options: Options<ListFilesForEntityData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ListFilesForEntityResponses,
    ListFilesForEntityErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/files/entity/{entity_type}/{entity_id}',
    ...options,
  })
}

/**
 * Get file count for entity
 * Get the total number of files for a specific project or run.
 *
 * - **entity_type**: Either "project" or "run"
 * - **entity_id**: The project ID or run barcode
 */
export const getFileCountForEntity = <ThrowOnError extends boolean = false>(
  options: Options<GetFileCountForEntityData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetFileCountForEntityResponses,
    GetFileCountForEntityErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/v1/files/entity/{entity_type}/{entity_id}/count',
    ...options,
  })
}
